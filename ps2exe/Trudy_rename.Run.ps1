#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 7774b116-6835-4b6e-a609-f1f1fabd58fc
# Source File: C:\Users\Techplex.Engineer\Desktop\Trudy_rename\Trudy_rename.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.63
     Generated on:       7/25/2014 10:56 PM
     Generated by:       Techplex.Engineer
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2014
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$linklabelTechplexLabs = New-Object 'System.Windows.Forms.LinkLabel'
	$labelMassFilenameTextAppe = New-Object 'System.Windows.Forms.Label'
	$labelMessages = New-Object 'System.Windows.Forms.Label'
	$msgs = New-Object 'System.Windows.Forms.Label'
	$labelTextToAppend = New-Object 'System.Windows.Forms.Label'
	$appendtext = New-Object 'System.Windows.Forms.TextBox'
	$buttonRename = New-Object 'System.Windows.Forms.Button'
	$labelFolderOfFilesToRenam = New-Object 'System.Windows.Forms.Label'
	$folderpath = New-Object 'System.Windows.Forms.TextBox'
	$buttonChooseFolder = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	$OnLoadFormEvent={
		#TODO: Initialize Form Controls here
		$appendtext.Text = Get-Date -Format "MMddyy"
	}
	
	$buttonChooseFolder_Click={
		#TODO: Place custom script here
		
		$folderbrowserdialog1.Description = "Select a folder of files to rename"
		$folderbrowserdialog1.ShowDialog()
		$folderpath.Text = $folderbrowserdialog1.SelectedPath
	}
	
	$buttonRename_Click = {
		#validate
		if ($appendtext.Text.Length -lt 1)
		{
			$msgs.Text = "ERROR: You must insert some text to append"
			return
		}
		
		if ($folderpath.Text.Length -lt 1)
		{
			$msgs.Text = "ERROR: You must select a directory of files"
			return
		}
		$msgs.Text = ""
		#for each folder in directory
		$var = Get-ChildItem $folderpath.Text
		
		foreach ($item in $var) {
			#Write-Host $item
			$base = ($item | select BaseName).BaseName
			$ext = ($item | select Extension).Extension
			$new = $base + " " + $appendtext.Text + $ext
			
			$path = $folderpath.Text +"\"+ $item
			
			Rename-Item -Path $path -NewName $new
			
		}
		$msgs.Text = "Operation Complete"
		#$var | Rename-Item -NewName ($_.name
		
	}
	
	
	$linklabelTechplexLabs_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		#ProcessStartInfo sInfo = new ProcessStartInfo("http://www.techwizworld.net");
		#Process.Start(sInfo);
		#Start-Process -Path "http://www.microsoft.com/"
		[System.Diagnostics.Process]::Start("http://www.techwizworld.net")
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_appendtext = $appendtext.Text
		$script:MainForm_folderpath = $folderpath.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelTechplexLabs.remove_LinkClicked($linklabelTechplexLabs_LinkClicked)
			$buttonRename.remove_Click($buttonRename_Click)
			$buttonChooseFolder.remove_Click($buttonChooseFolder_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($linklabelTechplexLabs)
	$MainForm.Controls.Add($labelMassFilenameTextAppe)
	$MainForm.Controls.Add($labelMessages)
	$MainForm.Controls.Add($msgs)
	$MainForm.Controls.Add($labelTextToAppend)
	$MainForm.Controls.Add($appendtext)
	$MainForm.Controls.Add($buttonRename)
	$MainForm.Controls.Add($labelFolderOfFilesToRenam)
	$MainForm.Controls.Add($folderpath)
	$MainForm.Controls.Add($buttonChooseFolder)
	$MainForm.ClientSize = '292, 266'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Mass Filename Text Appender"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# linklabelTechplexLabs
	#
	$linklabelTechplexLabs.Location = '186, 231'
	$linklabelTechplexLabs.Name = "linklabelTechplexLabs"
	$linklabelTechplexLabs.Size = '82, 23'
	$linklabelTechplexLabs.TabIndex = 9
	$linklabelTechplexLabs.TabStop = $True
	$linklabelTechplexLabs.Text = "Techplex labs"
	$linklabelTechplexLabs.add_LinkClicked($linklabelTechplexLabs_LinkClicked)
	#
	# labelMassFilenameTextAppe
	#
	$labelMassFilenameTextAppe.Location = '23, 231'
	$labelMassFilenameTextAppe.Name = "labelMassFilenameTextAppe"
	$labelMassFilenameTextAppe.Size = '181, 23'
	$labelMassFilenameTextAppe.TabIndex = 8
	$labelMassFilenameTextAppe.Text = "Mass Filename Text Appender ©"
	#
	# labelMessages
	#
	$labelMessages.Location = '23, 148'
	$labelMessages.Name = "labelMessages"
	$labelMessages.Size = '100, 13'
	$labelMessages.TabIndex = 7
	$labelMessages.Text = "Messages:"
	#
	# msgs
	#
	$msgs.Location = '23, 161'
	$msgs.Name = "msgs"
	$msgs.Size = '252, 58'
	$msgs.TabIndex = 6
	$msgs.Text = "None"
	#
	# labelTextToAppend
	#
	$labelTextToAppend.Location = '23, 70'
	$labelTextToAppend.Name = "labelTextToAppend"
	$labelTextToAppend.Size = '141, 14'
	$labelTextToAppend.TabIndex = 5
	$labelTextToAppend.Text = "Text to append:"
	#
	# appendtext
	#
	$appendtext.Location = '23, 87'
	$appendtext.Name = "appendtext"
	$appendtext.Size = '141, 20'
	$appendtext.TabIndex = 4
	#
	# buttonRename
	#
	$buttonRename.Location = '186, 127'
	$buttonRename.Name = "buttonRename"
	$buttonRename.Size = '75, 23'
	$buttonRename.TabIndex = 3
	$buttonRename.Text = "Rename"
	$buttonRename.UseVisualStyleBackColor = $True
	$buttonRename.add_Click($buttonRename_Click)
	#
	# labelFolderOfFilesToRenam
	#
	$labelFolderOfFilesToRenam.Location = '23, 19'
	$labelFolderOfFilesToRenam.Name = "labelFolderOfFilesToRenam"
	$labelFolderOfFilesToRenam.Size = '141, 14'
	$labelFolderOfFilesToRenam.TabIndex = 2
	$labelFolderOfFilesToRenam.Text = "Folder of files to rename:"
	#
	# folderpath
	#
	$folderpath.Location = '23, 39'
	$folderpath.Name = "folderpath"
	$folderpath.Size = '141, 20'
	$folderpath.TabIndex = 1
	#
	# buttonChooseFolder
	#
	$buttonChooseFolder.Location = '170, 36'
	$buttonChooseFolder.Name = "buttonChooseFolder"
	$buttonChooseFolder.Size = '105, 23'
	$buttonChooseFolder.TabIndex = 0
	$buttonChooseFolder.Text = "Choose Folder..."
	$buttonChooseFolder.UseVisualStyleBackColor = $True
	$buttonChooseFolder.add_Click($buttonChooseFolder_Click)
	#
	# folderbrowserdialog1
	#
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
